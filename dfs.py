# -*- coding: utf-8 -*-
"""dfs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1orSetOv7ze19HUk6dmRTO5TWxpUlbVMF
"""

from collections import defaultdict

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def addEdge(self, u, v):
        self.graph[u].append(v)

    def DFSUtil(self, v, visited, path, target):
        visited.add(v)
        path.append(v)

        # Jika node tujuan ditemukan, cetak jalur dan berhenti
        if v == target:
            print("Jalur ditemukan:", " -> ".join(map(str, path)))
            return True

        for neighbour in self.graph[v]:
            if neighbour not in visited:
                if self.DFSUtil(neighbour, visited, path, target):
                    return True  # Hentikan rekursi jika sudah menemukan jalur

        # Backtracking jika tidak menemukan jalur
        path.pop()
        return False

    def DFS(self, start, target):
        visited = set()
        path = []
        if not self.DFSUtil(start, visited, path, target):
            print(f"Tidak ada jalur dari {start} ke {target}")

# Kode Pengguna
if __name__ == "__main__":
    g = Graph()
    g.addEdge(0, 1)
    g.addEdge(0, 2)
    g.addEdge(1, 2)
    g.addEdge(2, 0)
    g.addEdge(2, 3)
    g.addEdge(3, 3)

    start_node = 1
    target_node = 3
    print(f"Mencari jalur dari {start_node} ke {target_node} menggunakan DFS:")
    g.DFS(start_node, target_node)