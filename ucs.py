# -*- coding: utf-8 -*-
"""ucs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1270ux7YDohMxCsP__fz49Z7W2xuzxemC
"""

import heapq

def uniform_cost_search(graph, cost, start, goal):
    priority_queue = []
    heapq.heappush(priority_queue, (0, start, [start]))  # (biaya, simpul, jalur)
    visited = set()

    while priority_queue:
        curr_cost, node, path = heapq.heappop(priority_queue)

        if node in visited:
            continue
        visited.add(node)

        if node == goal:
            print(f"Jalur terpendek: {' -> '.join(map(str, path))}")
            print(f"Biaya minimum: {curr_cost}")
            return

        for neighbor in graph.get(node, []):
            if neighbor not in visited:
                total_cost = curr_cost + cost[(node, neighbor)]
                heapq.heappush(priority_queue, (total_cost, neighbor, path + [neighbor]))

    print("Tidak ada jalur yang ditemukan.")

# Graf berbobot
graph = {
    0: [1, 3], 1: [6], 2: [1], 3: [1, 6, 4], 4: [2, 5], 5: [2, 6], 6: [4]
}
cost = {
    (0, 1): 2, (0, 3): 5, (1, 6): 1, (3, 1): 5, (3, 6): 6, (3, 4): 2,
    (2, 1): 4, (4, 2): 4, (4, 5): 3, (5, 2): 6, (5, 6): 3, (6, 4): 7
}

start_node = 0
goal_node = 6

print(f"Mencari jalur terpendek dari {start_node} ke {goal_node} menggunakan UCS:")
uniform_cost_search(graph, cost, start_node, goal_node)